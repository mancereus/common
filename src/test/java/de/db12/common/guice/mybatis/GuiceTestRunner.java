package de.db12.common.guice.mybatis;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.ibatis.jdbc.ScriptRunner;
import org.apache.ibatis.mapping.Environment;
import org.apache.ibatis.session.SqlSessionFactory;
import org.junit.runners.model.InitializationError;
import org.mybatis.guice.datasource.helper.JdbcHelper;

import com.google.inject.Binder;
import com.google.inject.Guice;
import com.google.inject.Module;
import com.google.inject.name.Names;

import de.db12.common.db.entity.Address;
import de.db12.common.db.entity.Contact;
import de.db12.common.db.mybatis.ConfigureMybatisModule;
import de.db12.common.db.mybatis.Counter;
import de.db12.common.db.mybatis.CustomType;
import de.db12.common.guice.test.AbstractGuiceTestRunner;

public final class GuiceTestRunner extends AbstractGuiceTestRunner {

	public GuiceTestRunner(Class<?> klass) throws InitializationError {
		super(klass);
		try {
			final Contact contact = new Contact();
			contact.setFirstName("John");
			contact.setLastName("Doe");
			contact.setCreated(new CustomType(System.currentTimeMillis()));
			contact.setAddress(null);
			final Contact contactWithAddress = new Contact();
			contactWithAddress.setFirstName("John");
			contactWithAddress.setLastName("Doe");
			contactWithAddress.setCreated(new CustomType(System
					.currentTimeMillis()));
			Address address = new Address();
			address.setNumber(1234);
			address.setStreet("Elm street");
			contactWithAddress.setAddress(address);
			final Counter counter = new Counter();

			// bindings
			List<Module> modules = this.createMyBatisModule();
			modules.add(new Module() {
				public void configure(Binder binder) {
					Names.bindProperties(binder, createTestProperties());
					binder.bind(Contact.class).toInstance(contact);
					binder.bind(Contact.class)
							.annotatedWith(Names.named("contactWithAddress"))
							.toInstance(contactWithAddress);
					binder.bind(Counter.class).toInstance(counter);
				}
			});
			this.injector = Guice.createInjector(modules);

			// prepare the test db
			Environment environment = this.injector
					.getInstance(SqlSessionFactory.class).getConfiguration()
					.getEnvironment();
			DataSource dataSource = environment.getDataSource();
			ScriptRunner runner = new ScriptRunner(dataSource.getConnection());
			runner.setAutoCommit(true);
			runner.setStopOnError(true);
			runner.runScript(new StringReader(
					"DROP TABLE IF EXISTS contact;"
							+ "CREATE TABLE contact (id int GENERATED BY DEFAULT AS IDENTITY (START WITH 1), "
							+ "first_name VARCHAR(20) NOT NULL, "
							+ "last_name VARCHAR(20) NOT NULL, "
							+ "created TIMESTAMP, "
							+ "address VARCHAR(100) DEFAULT NULL,"
							+ "profile_id INTEGER DEFAULT NULL" + ") ;"));
			runner.closeConnection();
		} catch (Exception e) {
			throw new InitializationError(e);
		}
	}

	@Override
	protected List<Module> createMyBatisModule() {
		List<Module> modules = new ArrayList<Module>(3);

		modules.add(JdbcHelper.HSQLDB_Server);
		modules.add(new ConfigureMybatisModule());

		return modules;
	}

	@Override
	protected Properties createTestProperties() {
		final Properties myBatisProperties = new Properties();
		myBatisProperties.setProperty("mybatis.environment.id", "test");
		myBatisProperties.setProperty("JDBC.schema", "test-db");
		myBatisProperties.setProperty("derby.create", "true");
		myBatisProperties.setProperty("JDBC.username", "sa");
		myBatisProperties.setProperty("JDBC.password", "");
		myBatisProperties.setProperty("JDBC.autoCommit", "false");
		return myBatisProperties;
	}

}
